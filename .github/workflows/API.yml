name: API
 
on:
  push:
    branches: [latest, testing]
    paths: [api/src/**]
    tags: [ v* ]
 
env:
  # Use docker.io for Docker Hub (Default) / Use ghcr.io for GitHub Container Registry
  REGISTRY: ghcr.io
  # github.repository as <account>/<repo>
  IMAGE_NAME: ${{ github.repository }}
 
jobs:
  docker:
    # Will run on latest and testing only
    if: (github.ref_name == 'latest' || github.ref_name == 'testing') && github.event.pull_request.draft == false
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
    steps:
      -
        name: Checkout repository
        uses: actions/checkout@v3
      - 
        name: Set up the environment
        run: mkdir -p ./api/src/config

      - 
        name: Create .env file
        if: github.ref_name == 'latest'
        run: echo "${{ secrets.PROD_API_VAR }}" > ./api/src/config/.env
      - 
        name: Create .env file
        if: github.ref_name == 'testing'
        run: echo "${{ secrets.TEST_API_VAR }}" > ./api/src/config/.env
      # -
      #   name: Make ENVFILE (LATEST)
      #   if: github.ref_name == 'latest'
      #   uses: SpicyPizza/create-envfile@v2.0
      #   with:
      #     envkey_JWT_SECRET_KEY: ${{ secrets.PROD_JWT_SECRET_KEY }}
      #     envkey_HOST: ${{ secrets.PROD_HOST }}
      #     envkey_PORT: ${{ secrets.PROD_PORT }}
      #     envkey_dev: ${{ secrets.PROD_DEV }}
      #     envkey_DBHOST: ${{ secrets.PROD_DBHOST }}
      #     envkey_DBUSER: ${{ secrets.PROD_DBUSER }}
      #     envkey_DBPASS: ${{ secrets.PROD_DBPASS }}
      #     envkey_DBNAME: ${{ secrets.PROD_DBNAME }}
      #     envkey_DOMAIN: ${{ secrets.PROD_DOMAIN }}
      #     envkey_PUBKEY: ${{ secrets.PROD_PUBKEY }}
      #     envkey_PRIKEY: ${{ secrets.PROD_PRIKEY }}
      #     file_name: .env
      #     directory: ./api/src/config/
      # -
      #   name: Make ENVFILE (TESTING)
      #   if: github.ref_name == 'testing'
      #   uses: SpicyPizza/create-envfile@v2.0
      #   with:
      #     envkey_JWT_SECRET_KEY: ${{ secrets.PROD_JWT_SECRET_KEY }}
      #     envkey_HOST: ${{ secrets.TEST_HOST }}
      #     envkey_PORT: ${{ secrets.TEST_PORT }}
      #     envkey_dev: ${{ secrets.TEST_DEV }}
      #     envkey_DBHOST: ${{ secrets.TEST_DBHOST }}
      #     envkey_DBUSER: ${{ secrets.TEST_DBUSER }}
      #     envkey_DBPASS: ${{ secrets.TEST_DBPASS }}
      #     envkey_DBNAME: ${{ secrets.TEST_DBNAME }}
      #     envkey_DOMAIN: ${{ secrets.TEST_DOMAIN }}
      #     envkey_PUBKEY: ${{ secrets.TEST_PUBKEY }}
      #     envkey_PRIKEY: ${{ secrets.TEST_PRIKEY }}
      #     file_name: .env
      #     directory: ./api/src/config/
      # -
      #   name: create-json (LATEST)
      #   if: github.ref_name == 'latest'
      #   id: create-json-latest
      #   uses: jsdaniell/create-json@v1.2.2
      #   with:
      #     name: "client_secrets.json"
      #     json: ${{ secrets.PROD_CLIENT_SECRETS }}
      #     dir: 'api/src/config/'
      # -
      #   name: create-json (TESTING)
      #   if: github.ref_name == 'testing'
      #   id: create-json-testing
      #   uses: jsdaniell/create-json@v1.2.2
      #   with:
      #     name: "client_secrets.json"
      #     json: ${{ secrets.TEST_CLIENT_SECRETS }}
      #     dir: 'api/src/config/'
      -
        name: Set up QEMU
        uses: docker/setup-qemu-action@v3
      -
        name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      -
        name: Docker Metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: |
            ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          flavor: |
            latest=false
            prefix=api-,onlatest=true
          tags: |
            type=ref,event=branch
            type=ref,event=tag
            type=ref,event=pr
      -
        name: Log into registry ${{ env.REGISTRY }}
        if: github.event_name != 'pull_request'
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      -
        name: Build and Push Docker Image
        id: build-and-push
        uses: docker/build-push-action@v5
        with:
          context: "./api"
          push: ${{ github.event_name != 'pull_request' }}
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
