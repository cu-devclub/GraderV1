name: AUTH

on:
  push:
    branches: [latest, testing]
    paths: [auth/**]
    tags: [v*]

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  docker:
    if: (github.ref_name == 'latest' || github.ref_name == 'testing') && github.event.pull_request.draft == false
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Create .env file (LATEST)
        if: github.ref_name == 'latest'
        run: |
          echo "${{ secrets.PROD_AUTH_VAR }}" > auth/.env

      - name: Create .env file (TESTING)
        if: github.ref_name == 'testing'
        run: |
          echo "${{ secrets.TEST_AUTH_VAR }}" > auth/.env

      - name: Create client_secrets.json (LATEST)
        if: github.ref_name == 'latest'
        uses: jsdaniell/create-json@v1.2.2
        with:
          name: "client_secrets.json"
          json: ${{ secrets.PROD_CLIENT_SECRETS }}
          dir: 'auth/'

      - name: Create client_secrets.json (TESTING)
        if: github.ref_name == 'testing'
        uses: jsdaniell/create-json@v1.2.2
        with:
          name: "client_secrets.json"
          json: ${{ secrets.TEST_CLIENT_SECRETS }}
          dir: 'auth/'

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Docker Metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: |
            ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          flavor: |
            latest=false
            prefix=auth-,onlatest=true
          tags: |
            type=ref,event=branch
            type=ref,event=tag
            type=ref,event=pr

      - name: Log into registry ${{ env.REGISTRY }}
        if: github.event_name != 'pull_request'
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build and Push Docker Image
        id: build-and-push
        uses: docker/build-push-action@v5
        with:
          context: "auth"
          push: ${{ github.event_name != 'pull_request' }}
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
